<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>vczyh</title><link>http://blog-github.zhangeek.com/</link><description>Recent content on vczyh</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 28 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="http://blog-github.zhangeek.com/index.xml" rel="self" type="application/rss+xml"/><item><title>位运算及应用</title><link>http://blog-github.zhangeek.com/post/bit-operation/</link><pubDate>Tue, 28 Dec 2021 00:00:00 +0000</pubDate><guid>http://blog-github.zhangeek.com/post/bit-operation/</guid><description>Go支持的位运算 位运算符 示例 说明 |（按位或） a | b 对应位有一个是1则返回1，否则返回0 &amp;amp;（按位与） a &amp;amp; b 对应位都是1则返回1，否则返</description></item><item><title>使用Linux Logrotate切割日志</title><link>http://blog-github.zhangeek.com/post/logrotate/</link><pubDate>Mon, 26 Jul 2021 23:00:00 +0800</pubDate><guid>http://blog-github.zhangeek.com/post/logrotate/</guid><description>logrotate可以管理日志文件，可以根据日期切割、根据日志文件大小切割、自动删除超过一定时间的归档日志。 安装 测试环境为 。 CentOS Linux release 8.2.2004 (Core) 其他系</description></item><item><title>语法测试</title><link>http://blog-github.zhangeek.com/post/syntax-testing/</link><pubDate>Mon, 26 Jul 2021 10:54:24 +0800</pubDate><guid>http://blog-github.zhangeek.com/post/syntax-testing/</guid><description>Based on MarkdownPreview test.md. Markdown # H1 ## H2 ### H3 #### H4 ##### H5 ###### H6 ### Duplicate Header ### Duplicate Header H1 H2 H3 H4 H5 H6 Duplicate Header Duplicate Header Paragraphs This is a paragraph. I am still part of the paragraph. New paragraph. This is a paragraph. I am still part of the paragraph. New paragraph. Anchor Define anchor by {#section-id} Something Footnote This is a</description></item><item><title>Go Channel</title><link>http://blog-github.zhangeek.com/post/go-channel/</link><pubDate>Sun, 26 Jul 2020 11:20:24 +0800</pubDate><guid>http://blog-github.zhangeek.com/post/go-channel/</guid><description>无缓冲通道 1 2 3 4 5 6 7 8 9 10 11 12 func main() { c := make(chan int) go func() { time.Sleep(3 * time.Second) fmt.Println(&amp;#34;receive&amp;#34;) fmt.Println(&amp;lt;-c) }() c &amp;lt;- 1 fmt.Println(&amp;#34;send&amp;#34;) } 执行结果。 receive 1 send 对于无缓冲通道，必须得send goroutine</description></item><item><title>Java SPI</title><link>http://blog-github.zhangeek.com/post/java-spi/</link><pubDate>Thu, 26 Mar 2020 11:20:24 +0800</pubDate><guid>http://blog-github.zhangeek.com/post/java-spi/</guid><description>SPI 简介 SPI 全称为 Service Provider Interface，是一种服务发现机制。SPI的本质是将接口实现类（可以是一个或多个）配置在文件中，然后服务读取配置文件，</description></item></channel></rss>