<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Vczyh's Blog</title><link>https://blog-github.zhangeek.com/tags/java/</link><description>Recent content in Java on Vczyh's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 26 Mar 2020 11:20:24 +0800</lastBuildDate><atom:link href="https://blog-github.zhangeek.com/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Java SPI</title><link>https://blog-github.zhangeek.com/posts/java-spi/</link><pubDate>Thu, 26 Mar 2020 11:20:24 +0800</pubDate><guid>https://blog-github.zhangeek.com/posts/java-spi/</guid><description>SPI 简介 SPI 全称为 Service Provider Interface，是一种服务发现机制。SPI的本质是将接口实现类（可以是一个或多个）配置在文件中，然后服务读取配置文件，加载指定接口的实现类。利用 SPI 机制很容易为程序提供拓展功能，使程序解耦。
SPI 可以分为 Java SPI 和框架自定义的 SPI，例如 Spring、Dubbo。
Java SPI 示例 本节通过一个示例演示 Java SPI 的使用方法，首先定义一个接口，名称为 Device。
public interface Device { void say(); } 接下来定义两个实现类，分别为 Computer 和 Phone。
public class Computer implements Device { @Override public void say() { System.out.println(&amp;#34;Hello, I am Computer&amp;#34;); } } public class Phone implements Device { @Override public void say() { System.out.println(&amp;#34;Hello, I am Phone&amp;#34;); } } 接下来在META-INF/services文件夹下创建一个文件，名称为 Device 的全限定名 com.</description></item></channel></rss>